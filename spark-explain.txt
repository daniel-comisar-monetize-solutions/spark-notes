== Physical Plan ==
*HashAggregate(keys=[tenant#2863, FacilityID#2864, ItemID#2865, StockAreaID#2866, StockAreaName#2929, StockAreaDescription#2930, StockAreaType#2931, StockAreaValue#2932, StockAreaTotalInv#2933, StockAreaParLevel#2934, StockAreaMaxInv#2935, StockAreaADU#2936, StockAreaAWU#2937, StockAreaPeak#2938, StockAreaDoH#2939, StockAreaDoH_WU#2940, StockAreaUsageValue#2941, StockAreaABC#2942, earliestExpirationDttm#2874, CriticalMedFlag#2943], functions=[])
+- *HashAggregate(keys=[tenant#2863, FacilityID#2864, ItemID#2865, StockAreaID#2866, StockAreaName#2929, StockAreaDescription#2930, StockAreaType#2931, StockAreaValue#2932, StockAreaTotalInv#2933, StockAreaParLevel#2934, StockAreaMaxInv#2935, StockAreaADU#2936, StockAreaAWU#2937, StockAreaPeak#2938, StockAreaDoH#2939, StockAreaDoH_WU#2940, StockAreaUsageValue#2941, StockAreaABC#2942, earliestExpirationDttm#2874, CriticalMedFlag#2943], functions=[])
   +- Window [tenant#2863, FacilityID#2864, ItemID#2865, StockAreaID#2866, StockAreaName#2867 AS StockAreaName#2929, StockAreaDescription#2868 AS StockAreaDescription#2930, StockAreaTypeDescription#2869 AS StockAreaType#2931, UnitCostInventoryValue#2870 AS StockAreaValue#2932, InventoryLevel#2871 AS StockAreaTotalInv#2933, ParLevel#2872 AS StockAreaParLevel#2934, MaxInventory#2873 AS StockAreaMaxInv#2935, ADU45#2893 AS StockAreaADU#2936, AWU45#2894 AS StockAreaAWU#2937, Peak45#2895 AS StockAreaPeak#2938, (cast(InventoryLevel#2871 as double) / cast(ADU45#2893 as double)) AS StockAreaDoH#2939, (cast(InventoryLevel#2871 as double) / cast(AWU45#2894 as double)) AS StockAreaDoH_WU#2940, round((TotalQuantity45#2896 * UnitCost#2911), 2) AS StockAreaUsageValue#2941, CASE WHEN ((TotalQuantity45#2896 = 0) || isnull(TotalQuantity45#2896)) THEN D WHEN ((cast(round((TotalQuantity45#2896 * UnitCost#2911), 2) as double) / cast(sum(_w2#2982L) windowspecdefinition(tenant#2863, stockareaid#2866, tenant#2863 ASC NULLS FIRST, stockareaid#2866 ASC NULLS FIRST, RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as double)) > 0.8) THEN A WHEN ((cast(_we_1_0#2978L as double) / cast(sum(_w2#2982L) windowspecdefinition(tenant#2863, stockareaid#2866, tenant#2863 ASC NULLS FIRST, stockareaid#2866 ASC NULLS FIRST, RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as double)) <= 0.8) THEN A WHEN ((cast(_we_1_1#2979L as double) / cast(sum(_w2#2982L) windowspecdefinition(tenant#2863, stockareaid#2866, tenant#2863 ASC NULLS FIRST, stockareaid#2866 ASC NULLS FIRST, RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as double)) <= 0.9) THEN B ELSE C END AS StockAreaABC#2942, earliestExpirationDttm#2874, CASE WHEN isnotnull(CriticalGCN#2925) THEN Y ELSE N END AS CriticalMedFlag#2943], [tenant#2863, stockareaid#2866]
      +- Window [tenant#2863, FacilityID#2864, ItemID#2865, StockAreaID#2866, StockAreaName#2867, StockAreaDescription#2868, StockAreaTypeDescription#2869, UnitCostInventoryValue#2870, InventoryLevel#2871, ParLevel#2872, MaxInventory#2873, ADU45#2893, AWU45#2894, Peak45#2895, TotalQuantity45#2896, UnitCost#2911, stockareaid#2866, earliestExpirationDttm#2874, CriticalGCN#2925, sum(_w2#2985L) windowspecdefinition(tenant#2863, stockareaid#2866, tenant#2863 ASC NULLS FIRST, stockareaid#2866 ASC NULLS FIRST, _w0#2983 DESC NULLS LAST, RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS _we_1_0#2978L, sum(_w2#2985L) windowspecdefinition(tenant#2863, stockareaid#2866, tenant#2863 ASC NULLS FIRST, stockareaid#2866 ASC NULLS FIRST, _w0#2983 DESC NULLS LAST, RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS _we_1_1#2979L, cast(round((TotalQuantity45#2896 * UnitCost#2911), 2) as bigint) AS _w2#2982L], [tenant#2863, stockareaid#2866], [_w0#2983 DESC NULLS LAST]
         +- *Sort [tenant#2863 ASC NULLS FIRST, stockareaid#2866 ASC NULLS FIRST, _w0#2983 DESC NULLS LAST], false, 0
            +- Exchange hashpartitioning(tenant#2863, stockareaid#2866, 200)
               +- *Project [tenant#2863, FacilityID#2864, ItemID#2865, StockAreaID#2866, StockAreaName#2867, StockAreaDescription#2868, StockAreaTypeDescription#2869, UnitCostInventoryValue#2870, InventoryLevel#2871, ParLevel#2872, MaxInventory#2873, ADU45#2893, AWU45#2894, Peak45#2895, TotalQuantity45#2896, UnitCost#2911, stockareaid#2866, earliestExpirationDttm#2874, CriticalGCN#2925, (TotalQuantity45#2896 * UnitCost#2911) AS _w0#2983, cast(round((TotalQuantity45#2896 * UnitCost#2911), 2) as bigint) AS _w2#2985L]
                  +- SortMergeJoin [gcn#2920], [CriticalGCN#2925], LeftOuter
                     :- *Sort [gcn#2920 ASC NULLS FIRST], false, 0
                     :  +- Exchange hashpartitioning(gcn#2920, 200)
                     :     +- *Project [tenant#2863, facilityid#2864, itemid#2865, stockareaid#2866, stockareaname#2867, stockareadescription#2868, stockareatypedescription#2869, unitcostinventoryvalue#2870, inventorylevel#2871, parlevel#2872, maxinventory#2873, earliestexpirationdttm#2874, adu45#2893, awu45#2894, peak45#2895, totalquantity45#2896, unitcost#2911, gcn#2920]
                     :        +- SortMergeJoin [ItemId#2865], [ItemId#2919], LeftOuter
                     :           :- *Sort [ItemId#2865 ASC NULLS FIRST], false, 0
                     :           :  +- Exchange hashpartitioning(ItemId#2865, 200)
                     :           :     +- *Project [tenant#2863, facilityid#2864, itemid#2865, stockareaid#2866, stockareaname#2867, stockareadescription#2868, stockareatypedescription#2869, unitcostinventoryvalue#2870, inventorylevel#2871, parlevel#2872, maxinventory#2873, earliestexpirationdttm#2874, adu45#2893, awu45#2894, peak45#2895, totalquantity45#2896, unitcost#2911]
                     :           :        +- SortMergeJoin [ItemId#2892, tenant#2889], [ItemID#2912, tenant#2913], LeftOuter
                     :           :           :- *Sort [ItemId#2892 ASC NULLS FIRST, tenant#2889 ASC NULLS FIRST], false, 0
                     :           :           :  +- Exchange hashpartitioning(ItemId#2892, tenant#2889, 200)
                     :           :           :     +- *Project [tenant#2863, facilityid#2864, itemid#2865, stockareaid#2866, stockareaname#2867, stockareadescription#2868, stockareatypedescription#2869, unitcostinventoryvalue#2870, inventorylevel#2871, parlevel#2872, maxinventory#2873, earliestexpirationdttm#2874, tenant#2889, itemid#2892, adu45#2893, awu45#2894, peak45#2895, totalquantity45#2896]
                     :           :           :        +- SortMergeJoin [tenant#2863], [customerabbrv#2907], LeftOuter
                     :           :           :           :- *Sort [tenant#2863 ASC NULLS FIRST], false, 0
                     :           :           :           :  +- Exchange hashpartitioning(tenant#2863, 200)
                     :           :           :           :     +- *Project [tenant#2863, facilityid#2864, itemid#2865, stockareaid#2866, stockareaname#2867, stockareadescription#2868, stockareatypedescription#2869, unitcostinventoryvalue#2870, inventorylevel#2871, parlevel#2872, maxinventory#2873, earliestexpirationdttm#2874, tenant#2889, itemid#2892, adu45#2893, awu45#2894, peak45#2895, totalquantity45#2896]
                     :           :           :           :        +- SortMergeJoin [tenant#2863, FacilityId#2864, StockAreaId#2866, ItemID#2865], [tenant#2889, FacilityId#2890, StockAreaId#2891, ItemId#2892], LeftOuter
                     :           :           :           :           :- *Sort [tenant#2863 ASC NULLS FIRST, FacilityId#2864 ASC NULLS FIRST, StockAreaId#2866 ASC NULLS FIRST, ItemID#2865 ASC NULLS FIRST], false, 0
                     :           :           :           :           :  +- Exchange hashpartitioning(tenant#2863, FacilityId#2864, StockAreaId#2866, ItemID#2865, 200)
                     :           :           :           :           :     +- *Scan JDBCRelation(StockAreaAssignment) [numPartitions=1] [tenant#2863,facilityid#2864,itemid#2865,stockareaid#2866,stockareaname#2867,stockareadescription#2868,stockareatypedescription#2869,unitcostinventoryvalue#2870,inventorylevel#2871,parlevel#2872,maxinventory#2873,earliestexpirationdttm#2874] ReadSchema: struct<tenant:string,facilityid:int,itemid:int,stockareaid:int,stockareaname:string,stockareadesc...
                     :           :           :           :           +- *Sort [tenant#2889 ASC NULLS FIRST, FacilityId#2890 ASC NULLS FIRST, StockAreaId#2891 ASC NULLS FIRST, ItemId#2892 ASC NULLS FIRST], false, 0
                     :           :           :           :              +- Exchange hashpartitioning(tenant#2889, FacilityId#2890, StockAreaId#2891, ItemId#2892, 200)
                     :           :           :           :                 +- *Scan JDBCRelation(DailyUsageByStockArea) [numPartitions=1] [tenant#2889,facilityid#2890,stockareaid#2891,itemid#2892,adu45#2893,awu45#2894,peak45#2895,totalquantity45#2896] PushedFilters: [*IsNotNull(tenant), *IsNotNull(itemid), *IsNotNull(stockareaid), *IsNotNull(facilityid)], ReadSchema: struct<tenant:string,facilityid:int,stockareaid:int,itemid:int,adu45:int,awu45:int,peak45:int,tot...
                     :           :           :           +- *Sort [customerabbrv#2907 ASC NULLS FIRST], false, 0
                     :           :           :              +- Exchange hashpartitioning(customerabbrv#2907, 200)
                     :           :           :                 +- *Scan JDBCRelation(Analyst.Customer) [numPartitions=1] [customerabbrv#2907] PushedFilters: [*IsNotNull(customerabbrv)], ReadSchema: struct<customerabbrv:string>
                     :           :           +- *Sort [ItemID#2912 ASC NULLS FIRST, tenant#2913 ASC NULLS FIRST], false, 0
                     :           :              +- Exchange hashpartitioning(ItemID#2912, tenant#2913, 200)
                     :           :                 +- *Scan JDBCRelation(ItemUnitCost) [numPartitions=1] [unitcost#2911,itemid#2912,tenant#2913] PushedFilters: [*IsNotNull(itemid), *IsNotNull(tenant)], ReadSchema: struct<unitcost:int,itemid:int,tenant:string>
                     :           +- *Sort [ItemId#2919 ASC NULLS FIRST], false, 0
                     :              +- Exchange hashpartitioning(ItemId#2919, 200)
                     :                 +- *Scan JDBCRelation(ItemFacilityReadModel) [numPartitions=1] [itemid#2919,gcn#2920] PushedFilters: [*IsNotNull(itemid)], ReadSchema: struct<itemid:int,gcn:int>
                     +- *Sort [CriticalGCN#2925 ASC NULLS FIRST], false, 0
                        +- *HashAggregate(keys=[CriticalGCN#2925], functions=[])
                           +- Exchange hashpartitioning(CriticalGCN#2925, 200)
                              +- *HashAggregate(keys=[CriticalGCN#2925], functions=[])
                                 +- *Scan JDBCRelation(Analyst.CriticalMedList) [numPartitions=1] [criticalgcn#2925] PushedFilters: [*IsNotNull(criticalgcn)], ReadSchema: struct<criticalgcn:int>
saa: org.apache.spark.sql.DataFrame = [tenant: string, facilityid: int ... 10 more fields]
usage: org.apache.spark.sql.DataFrame = [tenant: string, facilityid: int ... 6 more fields]
cus: org.apache.spark.sql.DataFrame = [customerabbrv: string]
iuc: org.apache.spark.sql.DataFrame = [unitcost: int, itemid: int ... 1 more field]
ifrm: org.apache.spark.sql.DataFrame = [itemid: int, gcn: int]
cml: org.apache.spark.sql.DataFrame = [criticalgcn: int]
df: org.apache.spark.sql.DataFrame = [tenant: string, FacilityID: int ... 18 more fields]
